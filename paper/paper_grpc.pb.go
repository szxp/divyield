// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: paper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaperServiceClient is the client API for PaperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaperServiceClient interface {
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (PaperService_PullClient, error)
}

type paperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaperServiceClient(cc grpc.ClientConnInterface) PaperServiceClient {
	return &paperServiceClient{cc}
}

func (c *paperServiceClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (PaperService_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &PaperService_ServiceDesc.Streams[0], "/paper.PaperService/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &paperServicePullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PaperService_PullClient interface {
	Recv() (*PullResponse, error)
	grpc.ClientStream
}

type paperServicePullClient struct {
	grpc.ClientStream
}

func (x *paperServicePullClient) Recv() (*PullResponse, error) {
	m := new(PullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PaperServiceServer is the server API for PaperService service.
// All implementations must embed UnimplementedPaperServiceServer
// for forward compatibility
type PaperServiceServer interface {
	Pull(*PullRequest, PaperService_PullServer) error
	mustEmbedUnimplementedPaperServiceServer()
}

// UnimplementedPaperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaperServiceServer struct {
}

func (UnimplementedPaperServiceServer) Pull(*PullRequest, PaperService_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedPaperServiceServer) mustEmbedUnimplementedPaperServiceServer() {}

// UnsafePaperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaperServiceServer will
// result in compilation errors.
type UnsafePaperServiceServer interface {
	mustEmbedUnimplementedPaperServiceServer()
}

func RegisterPaperServiceServer(s grpc.ServiceRegistrar, srv PaperServiceServer) {
	s.RegisterService(&PaperService_ServiceDesc, srv)
}

func _PaperService_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PaperServiceServer).Pull(m, &paperServicePullServer{stream})
}

type PaperService_PullServer interface {
	Send(*PullResponse) error
	grpc.ServerStream
}

type paperServicePullServer struct {
	grpc.ServerStream
}

func (x *paperServicePullServer) Send(m *PullResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PaperService_ServiceDesc is the grpc.ServiceDesc for PaperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paper.PaperService",
	HandlerType: (*PaperServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _PaperService_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "paper.proto",
}
